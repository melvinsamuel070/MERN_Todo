name: CD Pipeline

on:
  workflow_dispatch:
    inputs:
      event_type:
        description: 'Event to trigger deployment'
        required: true
        default: 'start_cd_pipeline'

env:
  AWS_REGION: us-east-1  # Replace this with your AWS region, e.g., us-west-2, eu-west-1, etc.
  BACKEND_IMAGE: melvinsamuel070/backend:latest
  FRONTEND_IMAGE: melvinsamuel070/frontend1:latest
  ALERTMANAGER_URL: http://localhost:9092/api/v2/alerts
  DOMAIN: melvinsamuel070.xyz # Replace this with your actual domain

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Configure AWS Credentials for accessing the EC2 instance
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           aws-region: ${{ env.AWS_REGION }}  # Using the environment variable defined above

      # Step 2: Set up SSH key for EC2 instance connection
      - name: Set up SSH key
        run: |
          echo "$AWS_SSH_PRIVATE_KEY" > /home/ubuntu/.ssh/id_rsa
          chmod 600 /home/ubuntu/.ssh/id_rsa
          # Add the EC2 server to known hosts
          ssh-keyscan -H ${{ secrets.INSTANCE_IP }} >> /home/ubuntu/.ssh/known_hosts

      # Step 3: Connect to EC2 Instance and Install Dependencies
      - name: Connect to EC2 Instance and Install Dependencies
        run: |
          ssh -o StrictHostKeyChecking=no -i "/home/ubuntu/.ssh/id_rsa" ubuntu@${{ secrets.INSTANCE_IP }} << 'EOF'
            sudo apt update
            sudo apt install -y docker.io docker-compose nginx
            sudo systemctl enable docker nginx
            sudo usermod -aG docker $USER
          EOF

      # Step 4: Copy your project files (frontend, backend, Pushgateway, Grafana) to the EC2 instance
      - name: Copy Project Files to EC2 Instance
        run: |
          scp -i "/home/ubuntu/.ssh/id_rsa" -o StrictHostKeyChecking=no -r ./MERN_Todo_app/ ubuntu@${{ secrets.INSTANCE_IP }}:/home/ubuntu/

      # Step 5: Deploy Services with Docker Compose
      - name: Deploy Services with Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no -i "/home/ubuntu/.ssh/id_rsa" ubuntu@${{ secrets.INSTANCE_IP }} << 'EOF'
            cd /home/ubuntu/MERN_Todo_app
            docker-compose up -d
          EOF

      # Step 6: Configure Nginx as Reverse Proxy
      - name: Configure Nginx as Reverse Proxy
        run: |
          ssh -o StrictHostKeyChecking=no -i "/home/ubuntu/.ssh/id_rsa" ubuntu@${{ secrets.INSTANCE_IP }} << 'EOF'
            sudo tee /etc/nginx/sites-available/default > /dev/null << 'CONFIG'
            server {
              listen 80;
              server_name ${{ env.DOMAIN }};
              location / {
                proxy_pass http://localhost:3000;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              }
              location /api/ {
                proxy_pass http://localhost:3500/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              }
              location /metrics/ {
                proxy_pass http://localhost:9091/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              }
              location /grafana/ {
                proxy_pass http://localhost:3001/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              }
            }
            CONFIG
            sudo systemctl restart nginx
          EOF

      # Step 7: Secure Nginx with SSL (Certbot)
      - name: Secure Nginx with SSL (Certbot)
        run: |
          ssh -o StrictHostKeyChecking=no -i "/home/ubuntu/.ssh/id_rsa" ubuntu@${{ secrets.INSTANCE_IP }} << 'EOF'
            sudo apt update
            sudo apt install -y certbot python3-certbot-nginx
            sudo certbot --nginx --non-interactive --agree-tos --email ${{ secrets.EMAIL_USERNAME }} -d ${{ env.DOMAIN }}
          EOF

      # Step 8: Send Email Notification for Deployment Success
      - name: Send Email Notification for Deployment Success
        uses: dawidd6/action-send-mail@v3
        with:
            server_address: smtp.gmail.com
            server_port: 587
            username: ${{ secrets.EMAIL_USERNAME }}
            password: ${{ secrets.EMAIL_PASSWORD }}
            subject: "Deployment Success: CD Pipeline"
            body: "The deployment of your application completed successfully."
            to: kingsamuel412@gmail.com
            from: ${{ secrets.EMAIL_USERNAME }}
