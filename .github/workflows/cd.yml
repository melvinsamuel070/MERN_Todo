name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

env:
  AWS_REGION: us-east-1
  BACKEND_IMAGE: melvinsamuel070/backend:latest
  FRONTEND_IMAGE: melvinsamuel070/frontend1:latest
  ALERTMANAGER_URL: http://localhost:9092/api/v2/alerts
  DOMAIN_NAME: melvinsamuel070.xyz
  EMAIL: melvinsamuel070@gmail.com

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.INSTANCE_IP }}" >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.INSTANCE_IP }} "echo 'SSH connection successful'"

      - name: Install Docker and Dependencies on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.INSTANCE_IP }} << 'EOF'
            set -e
            echo "Updating and installing Docker"
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update && sudo apt-get install -y docker-ce docker-compose
            sudo systemctl enable --now docker
            sudo usermod -aG docker ubuntu
          EOF

      - name: Compress Project Directory
        run: tar -czvf MERN_Todo_app.tar.gz -C ${{ github.workspace }}/MERN_Todo_app .

      - name: Transfer Project Archive to EC2
        run: scp -i ~/.ssh/id_rsa MERN_Todo_app.tar.gz ubuntu@${{ secrets.INSTANCE_IP }}:/home/ubuntu/

      - name: Deploy and Start Docker Compose on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.INSTANCE_IP }} << 'EOF'
            set -e
            echo "Extracting and starting Docker Compose"
            cd /home/ubuntu
            tar -xzvf MERN_Todo_app.tar.gz
            cd MERN_Todo_app
            sudo docker-compose up -d
          EOF

      - name: Configure Nginx and Certbot
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.INSTANCE_IP }} << 'EOF'
            set -e
            sudo apt-get install -y nginx certbot python3-certbot-nginx
            sudo systemctl enable --now nginx
            sudo certbot --nginx -d ${{ env.DOMAIN_NAME }} --non-interactive --agree-tos --email ${{ env.EMAIL }}

            # Nginx Configuration
            sudo tee /etc/nginx/sites-available/default > /dev/null << NGINX_CONF
            server {
              listen 80;
              server_name ${{ env.DOMAIN_NAME }};
              return 301 https://$host$request_uri;
            }
            server {
              listen 443 ssl;
              server_name ${{ env.DOMAIN_NAME }};
              ssl_certificate /etc/letsencrypt/live/${{ env.DOMAIN_NAME }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/${{ env.DOMAIN_NAME }}/privkey.pem;
              location / {
                proxy_pass http://localhost:3000;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
              }
              location /api/ {
                proxy_pass http://localhost:3500;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
              }
            }
            NGINX_CONF
            sudo nginx -t && sudo systemctl reload nginx
          EOF

      - name: Send Email Notification for Deployment Success
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Deployment Success: CD Pipeline"
          body: "The deployment of your application completed successfully."
          to: kingsamuel412@gmail.com
          from: ${{ secrets.EMAIL_USERNAME }}
