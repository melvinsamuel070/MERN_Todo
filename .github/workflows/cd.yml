name: CD Pipeline

on:
  workflow_dispatch:
    inputs:
      event_type:
        description: 'Event to trigger deployment'
        required: true
        default: 'start_cd_pipeline'

env:
  AWS_REGION: us-east-1  # Replace this with your AWS region
  BACKEND_IMAGE: melvinsamuel070/backend:latest
  FRONTEND_IMAGE: melvinsamuel070/frontend1:latest
  ALERTMANAGER_URL: http://localhost:9092/api/v2/alerts
  DOMAIN: melvinsamuel070.xyz  # Replace with your actual domain

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      
      # Step 1: Configure AWS Credentials for accessing the EC2 instance
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        # Explanation: Configures AWS CLI using stored secrets for AWS access. You'll need to store `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` in GitHub Secrets.

      # Step 2: Set up SSH key for EC2 instance connection
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "$AWS_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.INSTANCE_IP }} >> ~/.ssh/known_hosts
        env:
          AWS_SSH_PRIVATE_KEY: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
        # Explanation: Sets up SSH key authentication for accessing the EC2 instance. The private key is stored in GitHub Secrets as `AWS_SSH_PRIVATE_KEY`.

      # Step 3: Upload Project Directory to EC2 Instance
      - name: Upload Project Directory to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r ./MERN_Todo_app ubuntu@${{ secrets.INSTANCE_IP }}:/home/ubuntu/
        env:
          PROJECT_DIRECTORY: ./  # Update with the relative path to your project
        # Explanation: Copies the project files from the local repository to the EC2 instance using SCP.

      # Step 4: Install Docker and Dependencies on EC2 Instance with Debugging
      - name: Install Docker and Dependencies on EC2 Instance with Debugging
        run: |
          ssh -o StrictHostKeyChecking=no -i "/home/ubuntu/.ssh/id_rsa" ubuntu@${{ secrets.INSTANCE_IP }} <<'EOF'
            set -x
            trap 'echo "Error occurred at line $LINENO"' ERR

            # Update DNS settings
            echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf > /dev/null
            echo "nameserver 1.1.1.1" | sudo tee -a /etc/resolv.conf > /dev/null
            # Ensure hostname resolution
            sudo sed -i "1s/^/127.0.0.1 $(hostname)\n/" /etc/hosts
            # Install required packages
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            # Docker installation
            sudo install -m 0755 -d /etc/apt/keyrings
            sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
            sudo chmod a+r /etc/apt/keyrings/docker.asc
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            if sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin; then
              echo "Docker installation succeeded."
            else
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
            fi
            # Enable Docker service
            sudo systemctl enable docker
            sudo systemctl start docker
            sudo apt-get install -y docker-compose-plugin
            sudo usermod -aG docker $USER
            set +x
          EOF
        # Explanation: Installs Docker and Docker Compose on the EC2 instance. The set commands ensure debugging is enabled and errors are logged.

      # Step 5: Start Docker Compose on EC2 Instance with Debugging
      - name: Start Docker Compose on EC2 with Debugging
        run: |
          ssh -o StrictHostKeyChecking=no -i "/home/ubuntu/.ssh/id_rsa" ubuntu@${{ secrets.INSTANCE_IP }} <<'EOF'
            set -x
            trap 'echo "Error occurred at line $LINENO"' ERR

            # Navigate to project directory and start Docker Compose
            cd /home/ubuntu/MERN_Todo_app
            docker compose up -d

            set +x
          EOF
        # Explanation: Deploys the application on the EC2 instance using Docker Compose.

      # Step 6: Configure Nginx as Reverse Proxy
      - name: Configure Nginx as Reverse Proxy
        run: |
          ssh -o StrictHostKeyChecking=no -i "/home/ubuntu/.ssh/id_rsa" ubuntu@${{ secrets.INSTANCE_IP }} << 'EOF'
            sudo tee /etc/nginx/sites-available/default > /dev/null << 'CONFIG'
            server {
              listen 80;
              server_name ${{ env.DOMAIN }};
              location / {
                proxy_pass http://localhost:3000;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              }
              location /api/ {
                proxy_pass http://localhost:3500/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              }
              location /metrics/ {
                proxy_pass http://localhost:9091/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              }
              location /grafana/ {
                proxy_pass http://localhost:3001/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              }
            }
            CONFIG
            sudo systemctl restart nginx
          EOF
        # Explanation: Configures Nginx as a reverse proxy, forwarding requests to the correct services (Frontend, Backend, Grafana, etc.).

      # Step 7: Secure Nginx with SSL (Certbot)
      - name: Secure Nginx with SSL (Certbot)
        run: |
          ssh -o StrictHostKeyChecking=no -i "/home/ubuntu/.ssh/id_rsa" ubuntu@${{ secrets.INSTANCE_IP }} << 'EOF'
            sudo apt update
            sudo apt install -y certbot python3-certbot-nginx
            sudo certbot --nginx --non-interactive --agree-tos --email ${{ secrets.EMAIL_USERNAME }} -d ${{ env.DOMAIN }}
          EOF
        # Explanation: Uses Certbot to automatically install an SSL certificate for the Nginx server. The domain must be pointed to the EC2 instance.

      # Step 8: Send Email Notification for Deployment Success
      - name: Send Email Notification for Deployment Success
        uses: dawidd6/action-send-mail@v3
        with:
            server_address: smtp.gmail.com
            server_port: 587
            username: ${{ secrets.EMAIL_USERNAME }}
            password: ${{ secrets.EMAIL_PASSWORD }}
            subject: "Deployment Success: CD Pipeline"
            body: "The deployment of your application completed successfully."
            to: kingsamuel412@gmail.com
            from: ${{ secrets.EMAIL_USERNAME }}
        # Explanation: Sends an email notification using Gmail SMTP when the deployment is successful. The email credentials should be stored as secrets in GitHub.

