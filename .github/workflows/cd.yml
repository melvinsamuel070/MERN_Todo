name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

env:
  AWS_REGION: us-east-1
  BACKEND_IMAGE: melvinsamuel070/backend:latest
  FRONTEND_IMAGE: melvinsamuel070/frontend1:latest
  ALERTMANAGER_URL: http://localhost:9092/api/v2/alerts

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 2: Set up SSH key
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "$AWS_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.INSTANCE_IP }} >> ~/.ssh/known_hosts
        env:
          AWS_SSH_PRIVATE_KEY: ${{ secrets.AWS_SSH_PRIVATE_KEY }}

      # Step 3: Install Docker and Dependencies on EC2 Instance with Debugging
      - name: Install Docker and Dependencies on EC2 Instance with Debugging
        run: |
          ssh -o StrictHostKeyChecking=no -i "/home/ubuntu/.ssh/id_rsa" ubuntu@${{ secrets.INSTANCE_IP }} <<'EOF'
            set -x
            trap 'echo "Error occurred at line $LINENO"' ERR

            # Update DNS settings
            echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf > /dev/null
            echo "nameserver 1.1.1.1" | sudo tee -a /etc/resolv.conf > /dev/null
            # Ensure hostname resolution
            sudo sed -i "1s/^/127.0.0.1 $(hostname)\n/" /etc/hosts

            # Install required packages
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common

            # Docker installation
            sudo install -m 0755 -d /etc/apt/keyrings
            sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
            sudo chmod a+r /etc/apt/keyrings/docker.asc
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            if sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin; then
              echo "Docker installation succeeded."
            else
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
            fi

            # Enable Docker service
            sudo systemctl enable docker
            sudo systemctl start docker
            sudo apt-get install -y docker-compose-plugin
            sudo usermod -aG docker $USER
            set +x
          EOF
        # Explanation: Installs Docker and Docker Compose on the EC2 instance. Debugging enabled with set commands to log errors.

      # Step 4: Install and Configure Nginx on EC2 Instance
      - name: Install and Configure Nginx on EC2 Instance
        run: |
          ssh -o StrictHostKeyChecking=no -i "/home/ubuntu/.ssh/id_rsa" ubuntu@${{ secrets.INSTANCE_IP }} <<'EOF'
            set -x
            trap 'echo "Error occurred at line $LINENO"' ERR

            # Install Nginx
            sudo apt-get update
            sudo apt-get install -y nginx

            # Ensure the required directories exist
            sudo mkdir -p /etc/nginx/sites-available
            sudo mkdir -p /etc/nginx/sites-enabled

            # Start Nginx service
            sudo systemctl enable nginx
            sudo systemctl start nginx

            # Configure Nginx for reverse proxy
            sudo tee /etc/nginx/sites-available/default > /dev/null <<EOL
            server {
                listen 80;
                server_name _;

                location / {
                    proxy_pass http://localhost:3000;  # Frontend URL
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }

                location /api/ {
                    proxy_pass http://localhost:3500;  # Backend URL
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOL

            # Test Nginx configuration and reload
            sudo nginx -t
            sudo systemctl reload nginx

            set +x
          EOF
        # Explanation: Installs Nginx on the EC2 instance, configures it as a reverse proxy, and reloads the service.

      # Step 5: Start Docker Compose on EC2 with Debugging
      - name: Start Docker Compose on EC2 with Debugging
        run: |
          ssh -o StrictHostKeyChecking=no -i "/home/ubuntu/.ssh/id_rsa" ubuntu@${{ secrets.INSTANCE_IP }} <<'EOF'
            set -x
            trap 'echo "Error occurred at line $LINENO"' ERR

            # Navigate to project directory and start Docker Compose
            cd /home/ubuntu/MERN_Todo_app
            docker compose up -d

            set +x
          EOF
        # Explanation: Deploys the application with Docker Compose. Debugging is enabled to help troubleshoot any issues during deployment.

      # Step 6: Send Email Notification for Deployment Success
      - name: Send Email Notification for Deployment Success
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Deployment Success: CD Pipeline"
          body: "The deployment of your application completed successfully."
          to: kingsamuel412@gmail.com
          from: ${{ secrets.EMAIL_USERNAME }}
