name: CD Pipeline

on:
  workflow_dispatch:
    inputs:
      event_type:
        description: 'Event to trigger deployment'
        required: true
        default: 'start_cd_pipeline'

env:
  AWS_REGION: us-east-1  # Replace this with your AWS region
  BACKEND_IMAGE: melvinsamuel070/backend:latest
  FRONTEND_IMAGE: melvinsamuel070/frontend1:latest
  ALERTMANAGER_URL: http://localhost:9092/api/v2/alerts
  DOMAIN: melvinsamuel070.xyz  # Replace with your actual domain

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:

      # Step 1: Configure AWS Credentials for accessing the EC2 instance
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 2: Set up SSH key for EC2 instance connection
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "$AWS_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.INSTANCE_IP }} >> ~/.ssh/known_hosts
        env:
          AWS_SSH_PRIVATE_KEY: ${{ secrets.AWS_SSH_PRIVATE_KEY }}

      # Step 3: Checkout code from repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 4: Connect to EC2 Instance and Install Dependencies
      - name: Connect to EC2 Instance and Install Dependencies
        run: |
          ssh -o StrictHostKeyChecking=no -i "/home/melvin/main-pro.pem" ubuntu@${{ secrets.INSTANCE_IP }} << 'EOF'
            sudo apt update
            sudo apt install -y docker.io docker-compose nginx  # Install Docker, Docker Compose, and Nginx
            sudo systemctl enable docker nginx  # Enable Docker and Nginx to start on boot
            sudo usermod -aG docker $USER  # Add the current user to the Docker group
          EOF

      # Step 5: Copy Project Files to EC2 Instance
      - name: Copy Project Files to EC2 Instance
        run: |
          scp -i "/home/melvin/main-pro.pem" -o StrictHostKeyChecking=no -r ./MERN_Todo_app/ ubuntu@${{ secrets.INSTANCE_IP }}:/home/ubuntu/
        # **Instructions**: Ensure the directory contains your **frontend**, **backend**, **Pushgateway**, and **Grafana** Docker Compose setup.

      # Step 6: Deploy Backend, Frontend, Pushgateway, and Grafana using Docker Compose
      - name: Deploy Services with Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no -i "/home/melvin/main-pro.pem" ubuntu@${{ secrets.INSTANCE_IP }} << 'EOF'
            cd /home/ubuntu/MERN_Todo_app  # Navigate to your project directory
            docker compose up -d  # Start all services (frontend, backend, Pushgateway, and Grafana)
          EOF

      # Step 7: Install Docker and Dependencies on EC2 Instance with Debugging
      - name: Install Docker and Dependencies on EC2 Instance with Debugging
        run: |
          ssh -o StrictHostKeyChecking=no -i "/home/melvin/main-pro.pem" ubuntu@${{ secrets.INSTANCE_IP }} <<'EOF'
            set -x
            trap 'echo "Error occurred at line $LINENO"' ERR

            # DNS settings for Docker installation
            echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf > /dev/null
            echo "nameserver 1.1.1.1" | sudo tee -a /etc/resolv.conf > /dev/null

            # Update system and install prerequisites
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common

            # Docker installation
            sudo install -m 0755 -d /etc/apt/keyrings
            sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
            sudo chmod a+r /etc/apt/keyrings/docker.asc
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            if sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin; then
              echo "Docker installation succeeded."
            else
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
            fi
            # Enable Docker service
            sudo systemctl enable docker
            sudo systemctl start docker
            sudo usermod -aG docker $USER
            set +x
          EOF

      # Step 8: Start Docker Compose on EC2 Instance with Debugging
      - name: Start Docker Compose on EC2 with Debugging
        run: |
          ssh -o StrictHostKeyChecking=no -i "/home/melvin/main-pro.pem" ubuntu@${{ secrets.INSTANCE_IP }} <<'EOF'
            set -x
            trap 'echo "Error occurred at line $LINENO"' ERR

            # Navigate to project directory and start Docker Compose
            cd /home/ubuntu/MERN_Todo_app
            docker compose up -d

            set +x
          EOF

      # Step 9: Configure Nginx as Reverse Proxy
      - name: Configure Nginx as Reverse Proxy
        run: |
          ssh -o StrictHostKeyChecking=no -i "/home/melvin/main-pro.pem" ubuntu@${{ secrets.INSTANCE_IP }} << 'EOF'
            sudo tee /etc/nginx/sites-available/default > /dev/null << 'CONFIG'
            server {
              listen 80;
              server_name ${{ env.DOMAIN }};
              location / {
                proxy_pass http://localhost:3000;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              }
              location /api/ {
                proxy_pass http://localhost:3500/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              }
              location /metrics/ {
                proxy_pass http://localhost:9091/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              }
              location /grafana/ {
                proxy_pass http://localhost:3001/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              }
            }
            CONFIG
            sudo systemctl restart nginx
          EOF

      # Step 10: Secure Nginx with SSL (Certbot)
      - name: Secure Nginx with SSL (Certbot)
        run: |
          ssh -o StrictHostKeyChecking=no -i "/home/melvin/main-pro.pem" ubuntu@${{ secrets.INSTANCE_IP }} << 'EOF'
            sudo apt update
            sudo apt install -y certbot python3-certbot-nginx
            sudo certbot --nginx --non-interactive --agree-tos --email ${{ secrets.EMAIL_USERNAME }} -d ${{ env.DOMAIN }}
          EOF

      # Step 11: Send Email Notification for Deployment Success
      - name: Send Email Notification for Deployment Success
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Deployment Success: CD Pipeline"
          body: "The deployment of your application completed successfully."
          to: kingsamuel412@gmail.com
          from: ${{ secrets.EMAIL_USERNAME }}

