name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

env:
  AWS_REGION: us-east-1
  BACKEND_IMAGE: melvinsamuel070/backend:latest
  FRONTEND_IMAGE: melvinsamuel070/frontend1:latest
  ALERTMANAGER_URL: http://localhost:9092/api/v2/alerts

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 2: Set up SSH key for connecting to the EC2 instance
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "$AWS_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.INSTANCE_IP }} >> ~/.ssh/known_hosts
        env:
          AWS_SSH_PRIVATE_KEY: ${{ secrets.AWS_SSH_PRIVATE_KEY }}

      # Step 3: Connect to EC2 instance, install Docker and Docker Compose
      - name: Connect to EC2 Instance and Install Dependencies
        run: |
          ssh -o StrictHostKeyChecking=no -i "/home/ubuntu/.ssh/id_rsa" ubuntu@${{ secrets.INSTANCE_IP }} << 'EOF'
            # Update DNS settings to improve network reliability
            echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf > /dev/null
            echo "nameserver 1.1.1.1" | sudo tee -a /etc/resolv.conf > /dev/null

            # Ensure hostname resolution
            sudo sed -i "1s/^/127.0.0.1 $(hostname)\n/" /etc/hosts

            # Install Docker and Docker Compose
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose

          # Add the ubuntu user to the docker group
            sudo usermod -aG docker ubuntu

            # Enable Docker service
            sudo systemctl enable docker
            sudo systemctl start docker
          EOF

      # Step 4: Copy the docker-compose.yml file to EC2 instance
      - name: Copy docker-compose.yml to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i "/home/ubuntu/.ssh/id_rsa" ./docker-compose.yml ubuntu@${{ secrets.INSTANCE_IP }}:/home/ubuntu/docker-compose.yml

      # Step 5: Deploy application using Docker Compose on EC2
      - name: Deploy Application with Docker Compose
        run: |
          ssh -i "/home/ubuntu/.ssh/id_rsa" ubuntu@${{ secrets.INSTANCE_IP }} << 'EOF'
            # Navigate to the directory where the docker-compose.yml is copied
            cd /home/ubuntu

            # Pull the latest Docker images and restart the services
            docker-compose pull
            docker-compose up -d
          EOF

      # Step 6: Send email notification about successful deployment
      - name: Send Email Notification for Deployment Success
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Deployment Success: CD Pipeline"
          body: "The deployment of your application completed successfully."
          to: kingsamuel412@gmail.com
          from: ${{ secrets.EMAIL_USERNAME }}

      # (Optional) Add cleanup steps or post-deployment tasks here
