
name: CD

on:
  workflow_run:
    workflows: [CI]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Ensure AWS Configuration is set
      - name: Ensure AWS Configurations
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      # Set up SSH Key
      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        env:
          AWS_SSH_PRIVATE_KEY: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          
           
        
      # Step 3: Install Docker and Dependencies on EC2 Instance with Debugging
      - name: Test SSH Connection
        run: ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.INSTANCE_IP }} "echo 'SSH connection successful'"
        env:
             INSTANCE_IP: ${{ secrets.INSTANCE_IP }}

      - name: Install Docker and Dependencies on EC2 Instance with Debugging
        run: |
          ssh -o StrictHostKeyChecking=no -i "/home/ubuntu/.ssh/id_rsa" ubuntu@${{ secrets.INSTANCE_IP }} <<'EOF'
            set -x
            trap 'echo "Error occurred at line $LINENO"' ERR
            ssh -vvv -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.INSTANCE_IP }} "your_command_here"
            # Update DNS settings
            echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf > /dev/null
            echo "nameserver 1.1.1.1" | sudo tee -a /etc/resolv.conf > /dev/null
            sudo sed -i "1s/^/127.0.0.1 $(hostname)\n/" /etc/hosts
            # Install required packages
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            # Docker installation
            sudo install -m 0755 -d /etc/apt/keyrings
            sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
            sudo chmod a+r /etc/apt/keyrings/docker.asc
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            if sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin; then
              echo "Docker installation succeeded."
            else
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
            fi
            sudo systemctl enable docker
            sudo systemctl start docker
            sudo apt-get install -y docker-compose-plugin
            sudo usermod -aG docker $USER
            set +x
          EOF
        # Step 3: Check if directory exists and copy files only if needed
      - name: Deploy to EC2
        env:
          EC2_USER: "ubuntu"
          INSTANCE_IP: "${{ secrets.INSTANCE_IP }}"
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem $EC2_USER@$INSTANCE_IP << 'EOF'
            # Check if the project directory exists; if not, create it
            if [ ! -d "/home/ubuntu/MERN_Todo_app" ]; then
              echo "Directory does not exist. Creating..."
              mkdir -p /home/ubuntu/MERN_Todo_app
            else
              echo "Directory already exists. Checking files..."
            fi
          EOF
          
          # Sync required files to EC2 instance
          scp -o StrictHostKeyChecking=no -i key.pem -r alertmanager $EC2_USER@$INSTANCE_IP:/home/ubuntu/MERN_Todo_app/ &
          scp -o StrictHostKeyChecking=no -i key.pem -r backend $EC2_USER@$INSTANCE_IP:/home/ubuntu/MERN_Todo_app/ &
          scp -o StrictHostKeyChecking=no -i key.pem bash.sh $EC2_USER@$INSTANCE_IP:/home/ubuntu/MERN_Todo_app/ &
          scp -o StrictHostKeyChecking=no -i key.pem docker-compose.yaml $EC2_USER@$INSTANCE_IP:/home/ubuntu/MERN_Todo_app/ &
          scp -o StrictHostKeyChecking=no -i key.pem -r frontend $EC2_USER@$INSTANCE_IP:/home/ubuntu/MERN_Todo_app/ &
          scp -o StrictHostKeyChecking=no -i key.pem -r prometheus $EC2_USER@$INSTANCE_IP:/home/ubuntu/MERN_Todo_app/ &
          scp -o StrictHostKeyChecking=no -i key.pem prometheus.yml $EC2_USER@$INSTANCE_IP:/home/ubuntu/MERN_Todo_app/ &
          wait
            # Step 4: Load environment variables from the .env file in your repository
      - name: Load environment variables from .env file
        run: |
              export $(grep -v '^#' .env | xargs)  # Load variables from .env file and export them

          # Step 5: Deploy the application to the EC2 instance
      - name: Deploy and Run Containers
        env:
            INSTANCE_IP: ${{ secrets.INSTANCE_IP }}
            EC2_USER: ${{ secrets.EC2_USER }}
        run: |
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $EC2_USER@$INSTANCE_IP << 'EOF'
              set -e
              
              # Install Docker Compose if not already installed
              if ! command -v docker-compose &> /dev/null; then
                sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -Po '"tag_name": "\K.*\d')" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
              fi
              
              # Navigate to the application directory and run Docker Compose
              cd /home/ubuntu/MERN_Todo_app
              sudo docker compose up -d --build
        
              # Verify running containers
              RUNNING_CONTAINERS=$(sudo docker ps --filter "status=running" --format "{{.Names}}")
              REQUIRED_CONTAINERS="${REQUIRED_CONTAINERS}"
              for container in $REQUIRED_CONTAINERS; do
                if [[ ! "$RUNNING_CONTAINERS" =~ "$container" ]]; then
                  echo "Warning: $container is not running."
                  exit 1
                fi
              done
              echo "All required containers are running."
            EOF
        
      # Step 5: Notify of successful deployment
      - name: Notify Success
        run: echo "Deployment completed successfully, and all containers are running."

      - name: Deploy and Configure Instance
        run: |
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.INSTANCE_IP }} <<'EOF'
              set -x
              trap 'echo "Error occurred at line $LINENO"; exit 1' ERR
              
              # Run dpkg configuration
              sudo dpkg --configure -a
              
              # Update package lists and install Nginx
              sudo apt-get update
              sudo apt-get install -y nginx
              
              # # Install Certbot and Nginx plugin
              # sudo apt-get install -y certbot python3-certbot-nginx
              
              # Enable and start Nginx service
              sudo systemctl enable nginx
              sudo systemctl start nginx
              
              # # Obtain SSL certificate with Certbot
              # sudo certbot --nginx -d ${{ secrets.DOMAIN_NAME }} --non-interactive --agree-tos --email ${{ secrets.EMAIL }}
              
              # Test Nginx configuration
              sudo nginx -t
              
              # Reload Nginx service to apply changes
              sudo systemctl reload nginx
            EOF
        env:
            INSTANCE_IP: ${{ secrets.INSTANCE_IP }}
            DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
            EMAIL: ${{ secrets.EMAIL }}

      # Step 5: Configure Nginx Reverse Proxy
      - name: Configure Nginx Reverse Proxy for Frontend and Backend
        run: |
         #!/bin/bash
         ssh -o StrictHostKeyChecking=no -i "/home/ubuntu/.ssh/id_rsa" ubuntu@${{ secrets.INSTANCE_IP }} <<'EOF'
         set -x
         trap 'echo "Error occurred at line $LINENO"' ERR
                 
         echo 'nginx ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/nginx
                                       
         echo 'server {
          listen 80;
          server_name melvinsamuel070.xyz;
          return 301 https://$host$request_uri;
         }
          server {
          listen 443 ssl;
          server_name melvinsamuel070.xyz;
         # ssl_certificate /etc/letsencrypt/live/melvinsamuel070.xyz/fullchain.pem;
         # ssl_certificate_key /etc/letsencrypt/live/melvinsamuel070.xyz/privkey.pem;
          location / {
            proxy_pass http://107.21.180.100:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
         }
         location /api/ {
           proxy_pass http://107.21.180.100:3500;
           Host $host;
           proxy_set_header X-Real-IP $remote_addr;
           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
           proxy_set_header X-Forwarded-Proto $scheme;
         }
         }' | sudo tee /etc/nginx/sites-available/default > /dev/null
         # Test Nginx configuration and reload
         sudo nginx -t
         sudo systemctl reload nginx
         sudo systemctl start nginx
               
         set +x
         EOF
    
        # Step 6: Start Docker Compose on EC2 with Debugging
      - name: Start Docker Compose on EC2 with Debugging
        run: |
          ssh -o StrictHostKeyChecking=no -i "/home/ubuntu/.ssh/id_rsa" ubuntu@${{ secrets.INSTANCE_IP }} <<'EOF'
            set -x
            trap 'echo "Error occurred at line $LINENO"' ERR
            # Resolve any dpkg lock issues before starting Docker installation
            sudo dpkg --configure -a
            sudo apt-get install -f -y  # Attempt to fix broken dependencies
            # Update package lists
            sudo apt-get update
            # Check if Docker and Docker Compose are installed, and install if necessary
            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              sudo apt-get install -y docker.io
            fi
            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose not found, installing..."
              sudo apt-get install -y docker-compose
            fi
            # Navigate to project directory and start Docker Compose
            cd /home/ubuntu/MERN_Todo_app
            sudo docker-compose up -d
            set +x
          EOF
      - name: Notify Pushgateway about pipeline progress (start)
        run: |
         curl -X POST -H "Content-Type: application/json" \
         -d '{"status": "started", "job": "cd-pipeline", "pipeline_stage": "start"}' \
          http://107.21.180.100:9091/metrics/job/cd-pipeline/instance/${{ github.run_id }}
          curl -X POST -d 'push_time_seconds{instance="${{ github.run_id }}",job="cd-pipeline"} 1.7314249522950275e+09' \
          http://107.21.180.100:9091/metrics/job/cd-pipeline/instance/${{ github.run_id }}
      # Step 2: Deploy application (example)
      - name: Deploy application
        run: |
         echo "Starting application deployment..."
         docker-compose up -d
         curl -X POST -d 'push_time_seconds{instance="${{ github.run_id }}",job="cd-pipeline"} 1.7314249522950275e+09' \
         http://107.21.180.100:9091/metrics/job/cd-pipeline/instance/${{ github.run_id }} 
         
         # Step 3: Notify Pushgateway about pipeline progress (deployment in progress)
      - name: Notify Pushgateway about pipeline progress (step 1)
        run: |
         curl -X POST -H "Content-Type: application/json" \
         -d '{"status": "in-progress", "job": "cd-pipeline", "pipeline_stage": "deployment"}' \
         http://107.21.180.100:9091/metrics/job/cd-pipeline/instance/${{ github.run_id }}
     
         curl -X POST -d 'push_time_seconds{instance="${{ github.run_id }}",job="cd-pipeline"} 1.7314249522950275e+09' \
         http://107.21.180.100:9091/metrics/job/cd-pipeline/instance/${{ github.run_id }}


      - name: Notify Pushgateway about pipeline progress (step 2)
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{"status": "in-progress", "job": "cd-pipeline", "pipeline_stage": "configure_aws_credentials"}' \
          http://107.21.180.100:9091/metrics/job/cd-pipeline/instance/${{ github.run_id }}
   
          curl -X POST -d 'push_time_seconds{instance="${{ github.run_id }}",job="cd-pipeline"} 1.7314249522950275e+09' \
          http://107.21.180.100:9091/metrics/job/cd-pipeline/instance/${{ github.run_id }}

# Example of a step in the pipeline, such as configuring AWS credentials
      - name: Configure AWS credentials
        run: |
         echo "Configuring AWS credentials..."
    # Add AWS configuration commands here, e.g., AWS CLI setup or environment setup

# Step 5: Notify Pushgateway about pipeline completion (successful deployment)
      - name: Notify Pushgateway about pipeline completion
        run: |
         curl -X POST -H "Content-Type: application/json" \
         -d '{"status": "completed", "job": "cd-pipeline", "pipeline_stage": "deployment_complete"}' \
         http://107.21.180.100:9091/metrics/job/cd-pipeline/instance/${{ github.run_id }}
 
         curl -X POST -d 'push_time_seconds{instance="${{ github.run_id }}",job="cd-pipeline"} 1.7314249522950275e+09' \
         http://107.21.180.100:9091/metrics/job/cd-pipeline/instance/${{ github.run_id }}

# Step 6: Notify Pushgateway about failure (if any)
      - name: Notify Pushgateway about failure (if any)
        if: failure()  # This runs only if the previous step failed
        run: |
         curl -X POST -d 'push_failure_time_seconds{instance="${{ github.run_id }}",job="cd-pipeline"} 1' \
         http://107.21.180.100:9091/metrics/job/cd-pipeline/instance/${{ github.run_id }}
      - name: Final Cleanup
        run: |
         echo "Running final cleanup tasks..."
    # Your final cleanup commands, e.g., removing temporary files, running tests, etc.

# Step 8: Optional - Notify Pushgateway about pipeline completion with status "success"
      - name: Final Push to Pushgateway (success)
        run: |
         curl -X POST -H "Content-Type: application/json" \
         -d '{"status": "completed", "job": "cd-pipeline", "pipeline_stage": "final_success"}' \
          http://107.21.180.100:9091/metrics/job/cd-pipeline/instance/${{ github.run_id }}
    
          curl -X POST -d 'push_time_seconds{instance="${{ github.run_id }}",job="cd-pipeline"} 1.7314249522950275e+09' \
          http://107.21.180.100:9091/metrics/job/cd-pipeline/instance/${{ github.run_id }}

      # Step 7: Send Email Notification for Deployment Success
      - name: Send Email Notification for Deployment Success
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Deployment Success: CD Pipeline"
          body: "The deployment of your application completed successfully."
          to: kingsamuel412@gmail.com
          from: ${{ secrets.EMAIL_USERNAME }}