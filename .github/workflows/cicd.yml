name: CI/CD Pipeline for Local Development

on:
  push:
    branches:
      - main

env:
  BACKEND_IMAGE: melvinsamuel070/backend:latest
  FRONTEND_IMAGE: melvinsamuel070/frontend1:latest
  ALERTMANAGER_URL: http://localhost:9092/api/v2/alerts  # Updated Alertmanager URL
  EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}  # Email username
  EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}  # Email password
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}  # Docker Hub username
  DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}  # Docker Hub password
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}  # Updated Docker Hub token
  PROMETHEUS_URL: http://localhost:9090/api/v1/alerts  # Local Prometheus URL
  GRAFANA_URL: http://localhost:3001/api/annotations  # Local Grafana URL
  GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}  # Grafana API Key
  ALB_DNS_NAME: your-alb-dns-name  # Replace with your ALB DNS name
  AWS_REGION: us-east-1  # Your AWS region
  AUTO_SCALING_GROUP: your-auto-scaling-group-name  # Replace with your ASG name

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Backend Image
        run: |
          docker build -t ${{ env.BACKEND_IMAGE }} -f ./backend/Dockerfile ./backend

      - name: Build Frontend Image
        run: |
          docker build -t ${{ env.FRONTEND_IMAGE }} -f ./frontend/Dockerfile ./frontend

      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push Backend Image to Docker Hub
        run: |
          docker push ${{ env.BACKEND_IMAGE }}

      - name: Push Frontend Image to Docker Hub
        run: |
          docker push ${{ env.FRONTEND_IMAGE }}

      - name: Start Alertmanager
        run: |
          docker run -d --name alertmanager -p 9092:9093 \
          -v ./alertmanager:/alertmanager \
          prom/alertmanager
        
      - name: Wait for Alertmanager to be ready
        run: |
          for i in {1..10}; do 
            if curl -s -f http://localhost:9092; then 
              echo "Alertmanager is up and running!"; 
              break; 
            fi; 
            echo "Waiting for Alertmanager to be ready..."; 
            sleep 6; 
          done
        
      - name: Notify Alertmanager of Build Success
        run: |
          curl -X POST -H "Content-Type: application/json" -d '[
            {
              "alertname": "BuildSuccess",
              "severity": "info",
              "summary": "CI/CD Build Successful",
              "description": "The latest build was successful."
            }
          ]' http://localhost:9092/api/v2/alerts
        
      - name: Notify Prometheus of Build Success
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{
            "alerts": [{
              "alertname": "BuildSuccess",
              "severity": "info",
              "summary": "Build Successful",
              "description": "The latest build was successful."
            }]
          }' ${{ env.PROMETHEUS_URL }}
        
      - name: Annotate Grafana with Build Success
        run: |
          curl -X POST -H "Authorization: Bearer ${{ env.GRAFANA_API_KEY }}" -H "Content-Type: application/json" -d '{
            "dashboardId": 1,
            "time": {"from": "now-1h", "to": "now"},
            "tags": ["build"],
            "text": "The latest build was successful."
          }' ${{ env.GRAFANA_URL }}
        
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Deploy with Docker Compose
        run: |
          cd /home/melvin/MERN_Todo_app/docker-compose  # Change this to your local path
          docker compose pull
          docker compose up -d
        
      - name: Notify Alertmanager of Deployment Success
        run: |
          curl -X POST -H "Content-Type: application/json" -d '[
            {
              "alertname": "DeploymentSuccess",
              "severity": "info",
              "summary": "Deployment Successful",
              "description": "The application was successfully deployed."
            }
          ]' http://localhost:9092/api/v2/alerts
        
      - name: Notify Prometheus of Deployment Success
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{
            "alerts": [{
              "alertname": "DeploymentSuccess",
              "severity": "info",
              "summary": "Deployment Successful",
              "description": "The application was successfully deployed."
            }]
          }' ${{ env.PROMETHEUS_URL }}
        
      - name: Annotate Grafana with Deployment Success
        run: |
          curl -X POST -H "Authorization: Bearer ${{ env.GRAFANA_API_KEY }}" -H "Content-Type: application/json" -d '{
            "dashboardId": 1,
            "time": {"from": "now-1h", "to": "now"},
            "tags": ["deployment"],
            "text": "The application was successfully deployed."
          }' ${{ env.GRAFANA_URL }}
        
      - name: Update AWS Auto Scaling Group
        run: |
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name ${{ env.AUTO_SCALING_GROUP }} --desired-capacity 2 --region ${{ env.AWS_REGION }}  # Adjust capacity based on your needs
