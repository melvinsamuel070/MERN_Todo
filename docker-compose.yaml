services:

  backend:
    image: melvinsamuel070/backend:latest
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3500:3500"
    environment:
      - DB_URL=${DB_URL}
      - PORT=${PORT}
    volumes:
      - backend_data:/app/data
    restart: always
    networks:
      - mern_todo_mern_todo_mern_todo_app_mern_todo_app_mern_todo_app_napa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3500/todo"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s    

  frontend:
    image: melvinsamuel070/frontend1:latest
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: always
    networks:
      - mern_todo_mern_todo_mern_todo_app_mern_todo_app_mern_todo_app_napa-network
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:3000/healthz"]
        interval: 30s
        timeout: 10s
        retries: 3
        start_period: 10s
  
  prometheus:
    image: prom/prometheus:v2.45.3
    restart: unless-stopped
    volumes:
      - ./prometheus/:/etc/prometheus/
    command:
      - --web.enable-remote-write-receiver
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - mern_todo_mern_todo_mern_todo_app_mern_todo_app_mern_todo_app_napa-network # Ensure Prometheus is on the same network

  pushgateway:
    image: prom/pushgateway:latest  # Pushgateway image
    ports:
      - '9091:9091'  # Expose Pushgateway's port
    restart: always
    networks:
      - mern_todo_mern_todo_mern_todo_app_mern_todo_app_mern_todo_app_napa-network 

  node-exporter:
    image: prom/node-exporter:v1.7.0
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9101:9100"
    networks:
      - mern_todo_mern_todo_mern_todo_app_mern_todo_app_mern_todo_app_napa-network # Ensure Node Exporter is on the same network

  alertmanager:
    image: prom/alertmanager:v0.27.0
    restart: unless-stopped
    ports:
      - "9092:9093"  # Map port 9093 for Alertmanager access
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    networks:
      - mern_todo_mern_todo_mern_todo_app_mern_todo_app_mern_todo_app_napa-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - mern_todo_mern_todo_mern_todo_app_mern_todo_app_mern_todo_app_napa-network # Ensure Grafana is on the same network

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Access Docker socket
      - portainer_data:/data  # Portainer data storage
    ports:
      - "9000:9000"  # Portainer UI access
    restart: unless-stopped
    networks:
      - mern_todo_mern_todo_mern_todo_app_mern_todo_app_mern_todo_app_napa-network

networks:
  mern_todo_mern_todo_mern_todo_app_mern_todo_app_mern_todo_app_napa-network:
    driver: bridge

volumes:
  backend_data:
  # mongo_data:  # Add a volume for MongoDB
  grafana-data:  # Add a volume for Grafana
  portainer_data:  # Add a volume for Portainer







